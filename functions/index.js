/* eslint-disable no-undef */
const functions = require("firebase-functions");
const admin = require("firebase-admin");
admin.initializeApp();

exports.createUserWithRole = functions.https.onCall((data) => {
  const user = data.user;
  functions.logger.debug("Checking create user payload", { payload: user });

  return admin
    .auth()
    .createUser({
      // All posible props are listed below, some are not need but left as reference
      displayName: user.displayName,
      email: user.email,
      emailVerified: false,
      phoneNumber: user.phoneNumber,
      password: user.password,
      //photoURL: null,
      disabled: false,
    })
    .then((userRecord) => {
      functions.logger.debug("Successfully created new user:", {uid: userRecord.uid,});

      // If the user is created is then updated with custom claims to be used in RBAC
      return admin
        .auth()
        .setCustomUserClaims(userRecord.uid, user.customClaims)
        .then(() => {
          functions.logger.debug("Successfully created new user with custom claims",{ claims: user.customClaims });

          //Finally we create a user collection to manage the user's non-sensible info.
          return admin
          .firestore()
          .collection("users")
          .doc(userRecord.uid) //This creates the userdata using the same uid generated by the auth.createUser()
          .set({
            firstName: user.firstName,
            secondName: user.secondName,
            firstLastname: user.firstLastname,
            secondLastname: user.secondLastname,
            email: user.email,
            phoneNumber: user.phoneNumber,
            role: user.role
          })
          .then(() => {
            functions.logger.debug("Document successfully written!");
            return {
              message: "Successfully created new user with custom claims",
              success: true,
            };
          })
          .catch((error) => {
            functions.logger.error("Error writing document: ", error);
            return {
              message: "Error writing document: " + error,
              success: false,
            };
          });
        })
        .catch((error) => {
          functions.logger.error("Error creating custom claims for user:", error);
          return {
            message: "Error creating custom claims for user: " + error,
            success: false,
          };
        });
    })
    .catch((error) => {
      functions.logger.error("Error creating new user:", error);
      return {
        message: "Error creating new user: " + error,
        success: false,
      };
    });
});

exports.updateUserWithRole = functions.https.onCall((data) => {
  const user = data.user;
  functions.logger.debug("Checking update user payload", { payload: user });

  return admin
    .auth()
    .updateUser(user.userId, {
      // All posible props are listed below, some are not need but left as reference
      displayName: user.displayName,
      email: user.email,
      emailVerified: false,
      phoneNumber: user.phoneNumber,
      //password: user.password, //TODO: figure out how to update the password
      //photoURL: null,
      disabled: false,
    })
    .then((userRecord) => {
      functions.logger.debug("Successfully updated new user:", {uid: userRecord.uid,});

      // If the user is created is then updated with custom claims to be used in RBAC
      return admin
        .auth()
        .setCustomUserClaims(userRecord.uid, user.customClaims)
        .then(() => {
          functions.logger.debug("Successfully updated user with custom claims",{ claims: user.customClaims });

          //Finally we create a user collection to manage the user's non-sensible info.
          return admin
          .firestore()
          .collection("users")
          .doc(userRecord.uid) //This creates the userdata using the same uid generated by the auth.createUser()
          .set({
            firstName: user.firstName,
            secondName: user.secondName,
            firstLastname: user.firstLastname,
            secondLastname: user.secondLastname,
            email: user.email,
            phoneNumber: user.phoneNumber,
            role: user.role
          })
          .then(() => {
            functions.logger.debug("Document successfully written!");
            return {
              message: "Successfully updated user with custom claims",
              success: true,
            };
          })
          .catch((error) => {
            functions.logger.error("Error writing document: ", error);
            return {
              message: "Error writing document: " + error,
              success: false,
            };
          });
        })
        .catch((error) => {
          functions.logger.error("Error creating custom claims for user:", error);
          return {
            message: "Error creating custom claims for user: " + error,
            success: false,
          };
        });
    })
    .catch((error) => {
      functions.logger.error("Error updating user:", error);
      return {
        message: "Error updating user: " + error,
        success: false,
      };
    });
});

exports.deleteUserData = functions.https.onCall((data) => {
  const userId = data.userId;
  functions.logger.debug("Checking delete user payload", { payload: userId });

  //We delete the user from Authentication
  return admin
    .auth()
    .deleteUser(userId)
    .then(() => {
      functions.logger.debug('Successfully deleted user',{ uid: userId });

      //Then we delete the user data from the collection to manage the user's non-sensible info.
      return admin
        .firestore()
        .collection("users")
        .doc(userId)
        .delete()
        .then(() => {
          functions.logger.debug("Document successfully deleted!");
          return {
            message: "User successfully deleted",
            success: true,
          };
        })
        .catch((error) => {
          functions.logger.error("Error removing document: ", error);
          return {
            message: "Error deleting user frorm firestore: " + error,
            success: false,
          };
        });
    })
    .catch((error) => {
      functions.logger.error("Error deleting user:", error);
      return {
        message: "Error deleting user from Authentication: " + error,
        success: false,
      };
    });
});


